from odoo import _, api, fields, models


class IncompleteBookingMail(models.Model):
    _name = "incomplete_booking.mail"
    _description = "Incomplete Booking Mail"

    name = fields.Char(string="Name")
    email_from = fields.Char(string="From")
    subject = fields.Char(string="Subject")
    color = fields.Selection(
        [
            ("blue", "rgb(22, 96, 195)"),
            ("brown", "rgb(158, 122, 44)"),
            ("green", "rgb(64, 164, 40)"),
            ("gray", "rgb(75, 75, 75)"),
            ("purple", "rgb(116, 57, 147)"),
            ("red", "rgb(172, 31, 21)"),
            ("gold", "rgb(206, 139, 0)"),
            ("light_blue", "rgb(207, 228, 255)"),
            ("light_yellow", "rgb(232, 231, 203)"),
            ("light_green", "rgb(211, 248, 205)"),
            ("light_gray", "rgb(233, 233, 233)"),
            ("lavender", "rgb(228, 206, 253)"),
            ("pink", "rgb(253, 212, 206)"),
            ("peach", "rgb(250, 230, 167)"),
            ("light_gold", "rgb(236, 238, 241)"),
        ],
        string="Color",
        default="blue",
    )

    # message
    opening_note = fields.Html(string="Opening Note")
    include_opening_note = fields.Boolean(string="Include Opening Note", default=False)
    message = fields.Html(string="Message Text")
    include_message = fields.Boolean(string="Include Message text", default=False)
    booking_details = fields.Boolean(string="Booking Details")

    comments = fields.Html(string="Comment Text")
    include_comments = fields.Boolean(string="Include Comment text", default=False)

    outline = fields.Html(string="Outline")
    include_outline = fields.Boolean(string="Include Outline", default=False)

    result = fields.Html(string="Result", compute="_compute_result", store=True)

    @api.depends(
        "name",
        "email_from",
        "subject",
        "color",
        "opening_note",
        "include_opening_note",
        "message",
        "include_message",
        "booking_details",
        "comments",
        "include_comments",
        "outline",
        "include_outline",
    )
    def _compute_result(self):
        for record in self:
            company = self.env.company
            user = self.env.user

            placeholders = {
                "#FirstName#": user.name.split(" ")[0] if user.name else "User",
                "#LastName#": user.name.split(" ")[-1] if user.name else "",
                "#PropertyName#": company.name,
                "#DaysBeforeArrival#": 3,
                "#Street#": company.street,
                "#City#": company.city,
                "#State#": company.state_id.name if company.state_id else "",
                "#Zip#": company.zip,
                "#Country#": company.country_id.name if company.country_id else "",
                "#Phone#": company.phone,
                "#Email#": company.email,
            }

            logo = company.logo.decode() if company.logo else ""
            header = f"""
                <div style="background-color:{record.color}; padding: 20px;">
                <img src="data:image/png;base64,{logo}" alt="{company.name}" style="height: 100px;"/>
                    <div style="float: right; text-align: right;">
                        <strong>{company.name}</strong><br/>
                        {company.street}<br/>
                        {company.city}, {company.state_id.name}, {company.zip}<br/>
                        {company.country_id.name}<br/>
                        {company.phone}<br/>
                        {company.email}
                    </div>
                </div>
                <hr/>
            """
            footer = f"""
                <hr/>
                <div style="background-color:{record.color}; padding: 20px;">
                    <p>&copy; {fields.Date.today().year} {company.name}, {company.street}, {company.city}, {company.state_id.name}, {company.zip}</p>
                    <p>The message was automatically generated by MOVO</p>
                </div>
            """
            main_content = ""
            if record.include_opening_note:
                opening_note_content = record.opening_note
                if opening_note_content:
                    for placeholder, value in placeholders.items():
                        opening_note_content = opening_note_content.replace(
                            placeholder, str(value)
                        )
                    main_content += (
                        f"<div style='padding: 10px;'>{opening_note_content}</div>"
                    )

            if record.comments:
                comment_content = record.comments
                if comment_content:
                    for placeholder, value in placeholders.items():
                        comment_content = comment_content.replace(
                            placeholder, str(value)
                        )
                    main_content += (
                        f"<div style='padding: 10px;'>{comment_content}</div>"
                    )
            if record.booking_details:
                booking_details_content = (
                    "<div style='padding: 20px;'>Booking Details</div>"
                )
                for placeholder, value in placeholders.items():
                    booking_details_content = booking_details_content.replace(
                        placeholder, str(value)
                    )
                main_content += booking_details_content

            if record.include_message:
                message_content = record.message
                if message_content:
                    for placeholder, value in placeholders.items():
                        outline_content = message_content.replace(
                            placeholder, str(value)
                        )
                    main_content += (
                        f"<div style='padding: 10px;'>{message_content}</div>"
                    )

            if record.include_outline:
                outline_content = record.outline
                if outline_content:
                    for placeholder, value in placeholders.items():
                        outline_content = outline_content.replace(
                            placeholder, str(value)
                        )
                    main_content += (
                        f"<div style='padding: 10px;'>{outline_content}</div>"
                    )

            record.result = f"""
                {header}
                <div style="padding: 20px;">
                    {main_content}
                </div>
                {footer}
            """

    @api.onchange(
        "name",
        "email_from",
        "subject",
        "color",
        "opening_note",
        "include_opening_note",
        "message",
        "include_message",
        "booking_details",
        "comments",
        "include_comments",
        "outline",
        "include_outline",
    )
    def _onchange_fields(self):
        self._compute_result()

    @api.model
    def create(self, vals):
        record = self.search([], limit=1)
        if record:
            record.write(vals)  # Mavjud yozuvni yangilash
            return record
        return super().create(vals)

    def write(self, vals):
        res = super().write(vals)
        if (
            "name" in vals
            or "email_from" in vals
            or "subject" in vals
            or "color" in vals
            or "opening_note" in vals
            or "include_opening_note" in vals
            or "message" in vals
            or "include_message" in vals
            or "booking_details" in vals
            or "comments" in vals
            or "include_comments" in vals
            or "outline" in vals
            or "include_outline" in vals
        ):
            self._compute_result()
        return res

    @api.model
    def default_get(self, fields):
        res = super().default_get(fields)
        record = self.search([], limit=1)
        if record:
            res.update(
                {
                    "name": record.name,
                    "email_from": record.email_from,
                    "subject": record.subject,
                    "color": record.color,
                    "opening_note": record.opening_note,
                    "include_opening_note": record.include_opening_note,
                    "message": record.message,
                    "include_message": record.include_message,
                    "booking_details": record.booking_details,
                    "comments": record.comments,
                    "include_comments": record.include_comments,
                    "outline": record.outline,
                    "include_outline": record.include_outline,
                    "result": record.result,
                }
            )
        return res

    def action_send_test_email(self):
        view_id = self.env.ref("hms_app.send_test_mail_form").id
        return {
            "type": "ir.actions.act_window",
            "name": _("Send Test Email"),
            "view_mode": "form",
            "res_model": "send.test.mail",
            "views": [(view_id, "form")],
            "target": "new",
        }
